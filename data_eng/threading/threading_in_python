Link: 
really helpful link: https://realpython.com/intro-to-python-threading/#starting-a-thread

https://timber.io/blog/multiprocessing-vs-multithreading-in-python-what-you-need-to-know/

https://www.shanelynn.ie/using-python-threading-for-multiple-results-queue/



### What is a Thread?
A thread is a separate flow of execution. This means that your program will have two things happening at once. But for most Python 3 implementations the different threads do not actually execute at the same time: they merely appear to.


### Thread and Queue packages


ThreadPoolExecutor does .join() to make sure that all the threads that are working will be finished before the Daemon task (main thread) finishes the given task. Unless you want to write up .join() explicitly every time you write a threading process, try to utilize ThreadPoolExecutor.

You can also do a basic synchronization using threading.Lock(), but that's very cumbersome if you have multiple threads and you have to figure out the locks yourself. 


Queue is the class that queue.get() and queue.put() - and is also one of the ways to prevent race conditions. 

The threading.Event object allows one thread to signal an event while many other threads can be waiting for that event to happen. The key usage in this code is that the threads that are waiting for the event do not necessarily need to stop what they are doing, they can just check the status of the Event every once in a while.

If you give a positive number for maxsize, it will limit the queue to that number of elements, causing .put() to block until there are fewer than maxsize elements. If you don’t specify maxsize, then the queue will grow to the limits of your computer’s memory.

.get_message() and .set_message() got much smaller. They basically wrap .get() and .put() on the Queue. You might be wondering where all of the locking code that prevents the threads from causing race conditions went.

The core devs who wrote the standard library knew that a Queue is frequently used in multi-threading environments and incorporated all of that locking code inside the Queue itself. Queue is thread-safe.


Other primitives in threading module that can be handy in threading.

1. Semaphore
    - The internal counter is incremented when you call .release() and decremented when you call .acquire()
    - if a thread calls .acquire() when the counter is zero, that thread will block until a different thread calls .release() and increments the counter to one
    - Semaphores are frequently used to protect a resource that has a limited capacity
2. Timer
    - threading.Timer is a way to schedule a function to be called after a certain amount of time has passed.
    - if using .start(), the function will be called on a new thread at some point of time but be aware that there is no promise that it will be called exactly at the time you want
3. Barrier
    -  used to keep a fixed number of threads in sync
    - the caller must specify how many threads will be synchronizing on it
    - One use for a Barrier is to allow a pool of threads to initialize themselves. Having the threads wait on a Barrier after they are initialized will ensure that none of the threads start running before all of the threads are finished with their initialization.








import concurrent.futures
with concurrent.futures.ThreadPoolExecutor(max_workers=n_threads) as executor:



